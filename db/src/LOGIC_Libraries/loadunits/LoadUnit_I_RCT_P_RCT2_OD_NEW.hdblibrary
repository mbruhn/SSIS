LIBRARY "LoadUnit_I_RCT_P_RCT2_OD_NEW" 	LANGUAGE SQLSCRIPT AS	 	BEGIN			private variable cDataloadId constant nvarchar(256) := 'I_RCT_P_RCT2_OD_NEW';				private variable cInTableName constant nvarchar(256) := 'IN_CURX';		private variable cOutTableName constant nvarchar(256) := 'OUT_CURX';				private variable cRctArchiveTableName constant nvarchar(256) := 'DataLake_BW_Input_RCT2';			private variable cRctRawTableName constant nvarchar(256) := 'DataLake_BW_Archive_RCT2';			    		-- current log					/*   Direct transfer*//*         curxid.LoadController(LoadID, LoadDate, Currnentlog)        	do A_LoadDataToInTable -> Logs details + log data pertaining to each step        	do B_TruncateRctArch(loadID, LoadDate, :processingStatus,  :l_Logs);	           	do C_LoadDataToRctArch        	do D_TruncateOutTable        	do E_LoadDataToOutTable        	do F_LoadDataToRctRaw*/		PRIVATE PROCEDURE "LoadDataToInTable"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			recCountSource integer;			recCountInTable integer;						load_status "core.DL_LOAD_STATUS";					BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/			 				 				--recordentries = select "0CALMONTH" from REMOTE_CURX;				SELECT count(distinct "0CALMONTH") INTO recCountSource FROM REMOTE_CURX;				:oLogs.insert((current_timestamp || ' : Source Records in BW - ' || :recCountSource ));				:oLogs.insert((current_timestamp || ' : inserting started ' ));								INSERT INTO IN_CURX (					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					"00O2TJ4DS092CA213U2W9VQJ8",					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"0CALMONTH",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"0CALMONTH___T",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46",					"__AP_CHECK_INT",					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA")				SELECT 					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					"00O2TJ4DS092CA213U2W9VQJ8",					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"0CALMONTH",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"0CALMONTH___T",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46",					"__AP_CHECK_INT",					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA"				FROM REMOTE_CURX;				commit work;				:oLogs.insert((current_timestamp || ' : inserting stopped ' ));								SELECT count(*) INTO recCountInTable FROM IN_CURX;				:oLogs.insert((current_timestamp || ' : Records in InTable - ' || :recCountInTable ));			 		                     :oLogs.insert((current_timestamp || ' : Transferred'));                        /*Update Logs*/           	:load_Status.insert(:idl_load_status);           	iostatusArray[1] := true;		   	load_status."BWDataCountTS"[1] :=  current_timestamp; 			load_status."BWDataCount"[1]   :=  :recCountSource;				load_status."InTableName"[1] := :cInTableName;			load_status."InTabCountTS"[1] := current_timestamp; 			load_status."InTabCount"[1]  := :recCountInTable;           	            	           	call ow:"updateLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				idl_load_status => :load_status, istatusArray => :iostatusArray);							-- update outgoing status 			:odl_load_status.delete();			:odl_load_status.insert(:load_status);				            		END;				PRIVATE PROCEDURE "TruncateRctArch"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			load_status "core.DL_LOAD_STATUS";					BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/		    --delete from RCT_ARCHIVE_CURX where 1 = 1;		    call ow:"truncateRCTtable"(:cRctArchiveTableName, 7);			commit work;				    --select top 1 * from RCT_ARCHIVE_CURX;		    		    		    /*Update Logs*/           	:load_Status.insert(:idl_load_status);           	iostatusArray[2] := true;			               	call ow:"updateLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				idl_load_status => :load_status, istatusArray => :iostatusArray);							-- update outgoing status 			:odl_load_status.delete();			:odl_load_status.insert(:load_status);		                :oLogs.insert((current_timestamp || ' : Transferred'));		END;				PRIVATE PROCEDURE "LoadDataToRctArch"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			reccountOut integer;			reccountarch integer;			load_status "core.DL_LOAD_STATUS";						BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/					SELECT count(*) INTO recCountOut FROM OUT_CURX;				:oLogs.insert((current_timestamp || ' : Source Records in OutTable- ' || :recCountOut ));				:oLogs.insert((current_timestamp || ' : inserting started ' ));					INSERT INTO "RCT_ARCHIVE_CURX" (					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA",					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					"last_update",					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46")				SELECT 					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA",					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					current_timestamp, -- mandatory					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46"				FROM OUT_CURX;				commit work;								:oLogs.insert((current_timestamp || ' : inserting stopped ' ));								SELECT count(*) INTO recCountArch FROM RCT_ARCHIVE_CURX;				:oLogs.insert((current_timestamp || ' : Records in Arch Table - ' || :recCountArch ));		   /*Update Logs*/           	:load_Status.insert(:idl_load_status);           	iostatusArray[3] := true;			load_status."RCTArchName"[1] := :cRctArchiveTableName;			load_status."RCTArchCountTS"[1] := current_timestamp; 			load_status."RCTArchCount"[1]  := :recCountArch;        	                	call ow:"updateLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				idl_load_status => :load_status, istatusArray => :iostatusArray);							-- update outgoing status 			:odl_load_status.delete();			:odl_load_status.insert(:load_status);			             :oLogs.insert((current_timestamp || ' : Transferred'));						END;	 		PRIVATE PROCEDURE "TruncateOutTable"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			recCount integer;			load_status "core.DL_LOAD_STATUS";		 		BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/					:oLogs.insert((current_timestamp || ' : Truncating Out Table ' ));			SELECT count(*) INTO recCount FROM OUT_CURX;			:oLogs.insert((current_timestamp || ' : Truncating - number of records - ' || :recCount ));						TRUNCATE TABLE OUT_CURX;			commit work;						/*Update Logs*/           	:load_Status.insert(:idl_load_status);           	iostatusArray[4] := true;			               	call ow:"updateLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				idl_load_status => :load_status, istatusArray => :iostatusArray);							-- update outgoing status 			:odl_load_status.delete();			:odl_load_status.insert(:load_status);						:oLogs.insert((current_timestamp || ' : Out Table truncated' ));					            		END;					PRIVATE PROCEDURE "TruncateInTable"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			recCount integer;			load_status "core.DL_LOAD_STATUS";		BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/					:oLogs.insert((current_timestamp || ' : Truncating In Table ' ));			SELECT count(*) INTO recCount FROM IN_CURX;			:oLogs.insert((current_timestamp || ' : Truncating - number of records - ' || :recCount ));						TRUNCATE TABLE IN_CURX;			commit work;						:oLogs.insert((current_timestamp || ' : In Table truncated' ));					            :odl_load_status.insert(:idl_load_status);		END;						PRIVATE PROCEDURE "LoadDataToOutTable"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			recCountInTable integer;			recCountoutTable integer;			load_status "core.DL_LOAD_STATUS";		BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/						SELECT count(*) INTO recCountInTable  FROM IN_CURX;				:oLogs.insert((current_timestamp || ' : Source Records from InTable - ' || :recCountInTable ));				:oLogs.insert((current_timestamp || ' : inserting started ' ));								INSERT INTO OUT_CURX (					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					"00O2TJ4DS092CA213U2W9VQJ8",					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"0CALMONTH",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"0CALMONTH___T",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46",					"__AP_CHECK_INT",					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA")				SELECT 					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					"00O2TJ4DS092CA213U2W9VQJ8",					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"0CALMONTH",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"0CALMONTH___T",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46",					"__AP_CHECK_INT",					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA"				FROM IN_CURX;				commit work;								:oLogs.insert((current_timestamp || ' : inserting stopped ' ));				SELECT count(*) INTO recCountOutTable FROM OUT_CURX;				:oLogs.insert((current_timestamp || ' : Records in OutTable - ' || :recCountOutTable ));								    /*Update Logs*/           	:load_Status.insert(:idl_load_status);           	iostatusArray[5] := true;			load_status."OutTableName"[1] := :cOutTableName;			load_status."OutTabCountTS"[1] := current_timestamp; 			load_status."OutTabCount"[1]  := :recCountOutTable;           	            	call ow:"updateLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				idl_load_status => :load_status, istatusArray => :iostatusArray);							-- update outgoing status 			:odl_load_status.delete();			:odl_load_status.insert(:load_status);		            :oLogs.insert((current_timestamp || ' : Transferred'));		END;						PRIVATE PROCEDURE "LoadDataToRctRaw"(			IN    idataLoadId     nvarchar(256), 			IN    idataReadyTS    timestamp,			IN    idl_load_status "core.DL_LOAD_STATUS",			OUT   odl_load_status "core.DL_LOAD_STATUS",			OUT   oLogs           TABLE (line NCLOB),			INOUT iostatusArray   boolean array		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			recCountOut integer;			recCountNew integer;			load_status "core.DL_LOAD_STATUS";					BEGIN using "overWatch" as ow;		  -- insert fields from source to intable 		/*	ow:"setLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				odl_load_status => :dl_load_status, ostatusArray => :statusArray);		*/					-- Remove existing entries 			--	delete from RCT_RAW_CURX where 1 = 1;			--delete from DataLake_BW_Archive_RCT7U where 1 = 1;		    call ow:"truncateRCTtable"(:cRctRawTableName, 7);			commit work;								SELECT count(*) INTO recCountOut FROM OUT_CURX;				:oLogs.insert((current_timestamp || ' : Source Records in OutTable- ' || :recCountOut ));				:oLogs.insert((current_timestamp || ' : inserting started ' ));		 			INSERT INTO "RCT_RAW_CURX" (					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA",					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					"last_update",					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46")				SELECT 					"00O2TJ4DS0920QS81ZZ4OH2WM",					"00O2TJ4DS0920QS81ZZ4OJ0FQ",					"00O2TJ4DS0920QS81ZZ4OH986",					"00O2TJ4DS0920QS81ZZ4OJ6RA",					"00O2TJ4DS0920QS81ZZ4OHFJQ",					"00O2TJ4DS0920QS81ZZ4OOGDY",					"00O2TJ4DS0920QS81ZZ4OHLVA",					"00O2TJ4DS0920QS81ZZ4OJD2U",					"00O2TJ4DS0920QS81ZZ4OHS6U",					"00O2TJ4DS0924GSUIFZJLZQBJ",					"00O2TJ4DS0920QS81ZZ4OHYIE",					current_timestamp, -- mandatory					"00O2TJ4DS0920QS81ZZ4OI4TY",					"00O2TJ4DS0920QS81ZZ4OIB5I",					"00O2TJ4DS0920QS81ZZ4OGJXY",					"00O2TJ4DS0920QS81ZZ4OIHH2",					"00O2TJ4DS0920QS81ZZ4OGQ9I",					"00O2TJ4DS0920QS81ZZ4OINSM",					"00O2TJ4DS0920QS81ZZ4OGWL2",					"00O2TJ4DS0920QS81ZZ4OIU46"				FROM OUT_CURX;				commit work;								:oLogs.insert((current_timestamp || ' : inserting stopped ' ));								SELECT count(*) INTO recCountNew FROM RCT_RAW_CURX;				:oLogs.insert((current_timestamp || ' : Records in New Table - ' || :recCountNew ));		   /*Update Logs*/           	:load_Status.insert(:idl_load_status);           	iostatusArray[6] := true;			load_status."RCTTableName"[1] := :cRctRawTableName;			load_status."RCTTableCountTS"[1] := current_timestamp; 			load_status."RCTTableCount"[1]  := :recCountNew;               	call ow:"updateLoadStatus"(				idataLoadId => :idataLoadId, idataReadyTS => :idataReadyTS, 				idl_load_status => :load_status, istatusArray => :iostatusArray);							-- update outgoing status 			:odl_load_status.delete();			:odl_load_status.insert(:load_status);		            :oLogs.insert((current_timestamp || ' : Transferred'));		END;				/* MAIN			LoadController		*/		PUBLIC PROCEDURE "LoadController"(			IN dataLoadId  nvarchar(256), 			IN dataReadyTS timestamp,					OUT oLogs TABLE (line NCLOB)		)		LANGUAGE SQLSCRIPT SQL SECURITY DEFINER		AS			iLogs TABLE (line NCLOB);			dl_load_status "core.DL_LOAD_STATUS";			statusArray boolean array;		  		BEGIN using "overWatch" as ow;						-- Check is this the load id we should be loading 			:oLogs.insert((current_timestamp || ' : Starting load unit :'  || :dataloadId ));						IF dataLoadId = cDataloadId then 							BEGIN SEQUENTIAL EXECUTION					-- get or initialize new status					call ow:"getLoadStatus"(						idataLoadId => :dataLoadId, idataReadyTS => :dataReadyTS, 						odl_load_status => :dl_load_status, ostatusArray => :statusArray);															-- set starting point for load					/*Update Logs*/					dl_load_status."StartedTS"[1] := current_timestamp; 		        		  	call ow:"updateLoadStatus"(						idataLoadId => :dataLoadId, idataReadyTS => :dataReadyTS, 						idl_load_status => :dl_load_status, istatusArray => :statusArray);																																												-- Step A					call "TruncateInTable"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,												odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray); :oLogs.insert(:ilogs);											call "LoadDataToInTable"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,												odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray); :oLogs.insert(:ilogs);										-- Step B					call "TruncateRctArch"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,												odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray);	 :oLogs.insert(:ilogs);											-- Step C					call "LoadDataToRctArch"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,												odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray);	 :oLogs.insert(:ilogs);												-- Step D					call "TruncateOutTable"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,											 odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray); :oLogs.insert(:ilogs);										-- Step E					call "LoadDataToOutTable"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,												odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray); :oLogs.insert(:ilogs);										-- Step F					call "LoadDataToRctRaw"( idataLoadId     => :dataLoadId,  idataReadyTS    => :dataReadyTS,  idl_load_status => :dl_load_status,												odl_load_status => :dl_load_status, ologs           => :ilogs,	 iostatusArray   => :statusArray); :oLogs.insert(:ilogs);					-- processing done updating end and runtime					dl_load_status."EndedTS"[1] := current_timestamp;					if (:dl_load_status."EndedTS"[1] is not null) and (:dl_load_status."EndedTS"[1] is not null) then						dl_load_status."RuntimeSec"[1] := seconds_between(:dl_load_status."StartedTS"[1], :dl_load_status."EndedTS"[1]);					else						dl_load_status."RuntimeSec"[1] := -1;					end if;					        		  	call ow:"updateLoadStatus"(						idataLoadId => :dataLoadId, idataReadyTS => :dataReadyTS, 						idl_load_status => :dl_load_status, istatusArray => :statusArray);					-- Step G, FlushLogs into RCT					call ow:"syncLoadStatus"( idataLoadId => :dataLoadId, idataReadyTS => :dataReadyTS);					-- Sync BW status table					call ow:"syncBWStatus"( idataLoadId => :dataLoadId, idataReadyTS => :dataReadyTS);																	:oLogs.insert((current_timestamp || ' : Stopping load unit :'  || :dataloadId ));				END; -- Seq exec			END IF;				END;				END;